{% set name = "verilator" %}
{% set version = "5.018" %}
{% set sha256 = "8b544273eedee379e3c1a3bb849e14c754c9b5035d61ad03acdf3963092ba6c0" %}

package:
  name: verilator-packages
  version: {{ version }}

source:
  url: https://github.com/{{ name }}/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    - patches/0004-add-message-suggesting-verilator-debug-package.patch

build:
  number: 1
  skip: true  # [win]
  has_prefix_files:
    - share/verilator/include/verilated.mk
    - lib/pkgconfig/verilator.pc

requirements:
  build:
    - {{ compiler('cxx') }}
    - autoconf
    - bison
    - help2man
    - make
    - perl
    - python
    - sed
    - git # for patching
  host:
    - flex  # need to link against it for target
    - zlib
    - systemc-dev
  run:
    - {{ compiler('cxx') }}  # [osx]
    # The 4.034 branch was using this search and replace but it will break for osx-arm64
    #- {{ compiler('cxx') | replace('gxx_linux','gxx_impl_linux') | replace('_osx-64', '') }}
    # there must be a way to derive this from compiler('cxx') but this should work
    - gxx_impl_linux-64  # [linux64]
    - {{ pin_compatible('flex') }}
    - make
    - perl
    - python
  run_constrained:
    - {{ pin_compatible('systemc-dev', max_pin='x.x.x') }}

outputs:
  - name: verilator
    script: install.sh
    requirements:
      build:
        - {{ compiler('cxx') }}
        - make
        - ripgrep
        - perl # avoid BSD sed weirdness
      host:
        - zlib
        - flex  # need to link against it for target
      run:
        - {{ compiler('cxx') }}  # [osx]
        # there must be a way to derive this from compiler('cxx') but this should work
        - gxx_impl_linux-64  # [linux64]
        - {{ pin_compatible('flex') }}
        - make
        - perl
        - python
      run_constrained:
        - {{ pin_compatible('systemc-dev', max_pin='x.x.x') }}
    test:
      requires:
        - pkgconfig
        - cmake
        - make
        - python >=3
        - pyfiglet
        - graphviz
        - {{ pin_compatible('systemc-dev', exact=True) }}
        # only need C compiler because cmake bails if it doesn't have one.
        # at least with the CMakeLists.txt in the examples
        - {{ compiler('c') }}
        # re-install the default compiler package with activation scripts
        # because it is the easiest way to get cmake to work in the sanity checks
        # for cmake.  However, normal makefile based tests do not need this and
        # will work fine because verilated.mk builds in the path to the c++ compiler
        - {{ compiler('cxx') }}
      commands:
        - pkg-config --print-provides "$PKG_NAME"
        - verilator --version
        - cp -r "$PREFIX"/share/verilator/examples .
        # specify 'run' target so systemc examples fail if systemc isn't present
        - for d in examples/*; do pyfiglet -f ogre -w 200 $d; make -C $d run; done
  - name: verilator-debug
    script: install.sh
    requirements:
      build:
        - {{ compiler('cxx') }}
      host:
        # put verilator in host dependencies so it will be packaged first and enable testing verilator-debug
        - {{ pin_subpackage('verilator', exact=True) }}
      run:
           {{ pin_subpackage('verilator', exact=True) }}
    test:
      commands:
        - verilator_bin_dbg --version

about:
  home: https://veripool.org/wiki/verilator
  license: LGPL-3.0-only OR Artistic-2.0
  license_file:
    - LICENSE
    - Artistic
  summary: The fastest Verilog HDL simulator

  description: |
    Welcome to Verilator, the fastest Verilog HDL simulator.
      • Accepts synthesizable Verilog or SystemVerilog
      • Performs lint code-quality checks
      • Compiles into multithreaded C++, or SystemC
      • Creates XML to front-end your own tools
    Fast
      • Outperforms many commercial simulators
      • Single- and multi-threaded output models
    Widely Used
      • Wide industry and academic deployment
      • Out-of-the-box support from Arm, and RISC-V vendor IP
    Community Driven & Openly Licensed
      • Guided by the CHIPS Alliance and Linux Foundation
      • Open, and free as in both speech and beer
      • More simulation for your verification budget
    Commercial Support Available
      • Commercial support contracts
      • Design support contracts
      • Enhancement contracts
  doc_url: https://www.veripool.org/projects/verilator/wiki/Documentation
  dev_url: https://github.com/verilator/verilator

extra:
  recipe-maintainers:
    - timkpaine
    - timsnyder
