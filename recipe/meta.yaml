{% set name = "verilator" %}
{% set version = "5.008" %}
{% set sha256 = "1d19f4cd186eec3dfb363571e3fe2e6d3377386ead6febc6ad45402f0634d2a6" %}

package:
  name: verilator-packages
  version: {{ version }}

source:
  url: https://github.com/{{ name }}/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    - patches/0001-treat-DEFENV_VERILATOR_ROOT-as-c_str-for-conda-reloc.patch  # remove next bump. see https://github.com/verilator/verilator/pull/4044 
    - patches/0004-add-message-suggesting-verilator-debug-package.patch  # [no win]

build:
  number: 3
  has_prefix_files:
    - share/verilator/include/verilated.mk
    - lib/pkgconfig/verilator.pc

requirements:
  build:
    - {{ compiler('cxx') }}
    - autoconf  # [not win]
    - bison     # [not win]
    - cmake     # [win]
    - help2man  # [not win]
    - make      # [not win]
    - perl
    - python
    - sed       # [not win]
    - git # for patching
  host:
    - flex  # [not win]
    - winflexbison  # [win]
    - zlib
  run:
    - {{ compiler('cxx') }}  # [osx or win]
    # The 4.034 branch was using this search and replace but it will break for osx-arm64
    #- {{ compiler('cxx') | replace('gxx_linux','gxx_impl_linux') | replace('_osx-64', '') }}
    # there must be a way to derive this from compiler('cxx') but this should work
    - gxx_impl_linux-64  # [linux64]
    - {{ pin_compatible('flex') }}  # [not win]
    - make  # [not win]
    - cmake  # [win]
    - perl
    - python

# we don't split the package on windows because it doesn't include the big debug build by default
test:                                                   # [win]
  source_files:                                         # [win]
    # windows build doesn't install the examples and cmake_hello_c depends on make_hello_c
    - examples/cmake_hello_c                            # [win]
    - examples/make_hello_c                             # [win]
  commands:                                             # [win]
    - echo on                                           # [win]
    - verilator_bin.exe --version                       # [win]
    - mkdir examples\cmake_hello_c\build                # [win]
    - chdir examples\cmake_hello_c\build                # [win]
    - cmake ..                                          # [win]
    - cmake --build . --config Release                  # [win]
    - dir                  # [win]

outputs:                                                                                 # [not win]
  - name: verilator                                                                      # [not win]
    script: install.sh                                                                   # [not win]
    requirements:                                                                        # [not win]
      build:                                                                             # [not win]
        - {{ compiler('cxx') }}                                                          # [not win]
        - make                                                                           # [not win]
        - ripgrep                                                                        # [not win]
        - perl # avoid BSD sed weirdness                                                 # [not win]
      host:                                                                              # [not win]
        - zlib                                                                           # [not win]
        - flex  # need to link against it for target                                     # [not win]
      run:                                                                               # [not win]
        - {{ compiler('cxx') }}  # [osx]                                                 # [not win]
        # there must be a way to derive this from compiler('cxx') but this should work   # [not win]
        - gxx_impl_linux-64  # [linux64]                                                 # [not win]
        - {{ pin_compatible('flex') }}                                                   # [not win]
        - make                                                                           # [not win]
        - perl                                                                           # [not win]
        - python                                                                         # [not win]
    test:                                                                                # [not win]
      requires:                                                                          # [not win]
        - pkgconfig                                                                      # [not win]
        - cmake                                                                          # [not win]
        - make                                                                           # [not win]
        - python >=3                                                                     # [not win]
        - graphviz                                                                       # [not win]
        # only need C compiler because cmake bails if it doesn't have one.               # [not win]
        # at least with the CMakeLists.txt in the examples                               # [not win]
        - {{ compiler('c') }}                                                            # [not win]
        # re-install the default compiler package with activation scripts                # [not win]
        # because it is the easiest way to get cmake to work in the sanity checks        # [not win]
        # for cmake.  However, normal makefile based tests do not need this and          # [not win]
        # will work fine because verilated.mk builds in the path to the c++ compiler     # [not win]
        - {{ compiler('cxx') }}                                                          # [not win]
      commands:                                                                          # [not win]
        - pkg-config --print-provides "$PKG_NAME"                                        # [not win]
        - verilator --version                                                            # [not win]
        - cp -r "$PREFIX"/share/verilator/examples .                                     # [not win]
        - for d in examples/*; do echo $d; make -C $d; done                              # [not win]
  - name: verilator-debug                                                                # [not win]
    script: install.sh                                                                   # [not win]
    requirements:                                                                        # [not win]
      build:                                                                             # [not win]
        - {{ compiler('cxx') }}                                                          # [not win]
      run:                                                                               # [not win]
          # depending on the verilator package here breaks testing                       # [not win]
          # the package because conda-build can't install the verilator                  # [not win]
          # package yet?  wtf?                                                           # [not win]
          #- {{ pin_subpackage('verilator', exact=True) }}                               # [not win]
    test:                                                                                # [not win]
      commands:                                                                          # [not win]
        - verilator_bin_dbg --version                                                    # [not win]

about:
  home: https://veripool.org/wiki/verilator
  license: LGPL-3.0-only OR Artistic-2.0
  license_file:
    - LICENSE
    - Artistic
  summary: The fastest Verilog HDL simulator

  description: |
    Welcome to Verilator, the fastest Verilog HDL simulator.
      • Accepts synthesizable Verilog or SystemVerilog
      • Performs lint code-quality checks
      • Compiles into multithreaded C++, or SystemC
      • Creates XML to front-end your own tools
    Fast
      • Outperforms many commercial simulators
      • Single- and multi-threaded output models
    Widely Used
      • Wide industry and academic deployment
      • Out-of-the-box support from Arm, and RISC-V vendor IP
    Community Driven & Openly Licensed
      • Guided by the CHIPS Alliance and Linux Foundation
      • Open, and free as in both speech and beer
      • More simulation for your verification budget
    Commercial Support Available
      • Commercial support contracts
      • Design support contracts
      • Enhancement contracts
  doc_url: https://www.veripool.org/projects/verilator/wiki/Documentation
  dev_url: https://github.com/verilator/verilator

extra:
  recipe-maintainers:
    - timkpaine
    - timsnyder
